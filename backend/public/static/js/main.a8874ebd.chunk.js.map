{"version":3,"sources":["assets/imagenes/EscudoUNAM.png","components/Buscador/Buscador.jsx","components/Header/Header.jsx","components/Navegacion/BotonesNavegacion.jsx","components/Navegacion/Nav.jsx","components/Card/Card.jsx","components/ListaCards/ListaCards.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Buscador","props","send","useState","text","setText","onSubmit","event","preventDefault","target","reset","className","type","icon","faSearch","onChange","value","placeholder","Header","header","titulo","logo","texto","alert","src","alt","BotonesNavegacion","withRouter","history","comprimido","boton","pagina","nombre","icono","onClick","push","renderNombre","Nav","setComprimido","movil","setMovil","nav","useRef","listaBotones","botones","useLayoutEffect","window","addEventListener","innerWidth","useEffect","current","style","width","toggleSize","id","ref","display","faBars","map","i","key","Card","so","arquitectura","multiUsuario","kernel","multiTareas","licencia","ListaCards","App","faHome","faLaptopCode","faPen","faFileCode","headerData","exact","path","render","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8874ebd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EscudoUNAM.fcf0c577.png\";","import React, { useState } from 'react';\r\nimport \"./Buscador.scss\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\"\r\nconst Buscador = (props) => {\r\n   const {send}=props;\r\n   const [text, setText] = useState(\"\")\r\n\r\nconst handleOnChange=(event)=>{\r\n   setText(event.target.value);\r\n\r\n}\r\n\r\nconst handleOnSubmit=(event)=>{\r\n   \r\n   send(text);\r\n   \r\n   event.preventDefault();\r\n   event.target.reset() ;\r\n   setText(\"\")\r\n   \r\n}\r\n\r\n   return (\r\n      <form  onSubmit={handleOnSubmit} className=\"contenedor-buscador\">\r\n         <button  type=\"submit\" ><FontAwesomeIcon icon={faSearch}/></button>\r\n         <input  onChange={handleOnChange}\r\n          placeholder={\"Buscar Sistema Operativo\"} type=\"search\" />\r\n      </form>\r\n   );\r\n}\r\n\r\nexport default Buscador;\r\n","import React from 'react';\r\nimport \"./Header.scss\"\r\nimport Buscador from \"../Buscador\";\r\n\r\n/*Header recibe header como propiedad\r\nque es un objeto\r\ncon logo string,titulo string y\r\nlista botones donde cada boon contiene\r\nicono svg, nombre string, ruta string\r\n*/\r\nconst Header = (props) => {\r\n\r\nconst {titulo,logo} =props.header;\r\n\r\n\r\nconst send=(texto)=>{\r\n   alert(texto)\r\n}\r\n\r\n   return (\r\n      <header>\r\n         <Buscador send={send}></Buscador>\r\n         <h1>{titulo}</h1>\r\n         <img src={logo} alt={titulo}/>\r\n      </header>\r\n   );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport \"./BotonesNavegacion.scss\";\r\nimport { withRouter } from \"react-router\";\r\n\r\n\r\nconst BotonesNavegacion = withRouter((props) => {\r\n   const { history, comprimido } = props;\r\n   const { pagina, nombre, icono } = props.boton;\r\n\r\n\r\n   const handleOnClick = () => {\r\n      history.push(pagina)\r\n   }\r\n   const renderNombre = (comprimido) => {\r\n      if (!comprimido) {\r\n         return (<span>{nombre}</span>);\r\n      }\r\n   }\r\n   return (\r\n      <button className=\"nav\" onClick={handleOnClick}>\r\n         {renderNombre(comprimido)}\r\n\r\n         {icono}\r\n      </button>\r\n   );\r\n})\r\n\r\nexport default BotonesNavegacion;\r\n","import React, { useState, useRef, useEffect, useLayoutEffect } from 'react';\r\nimport \"./Nav.scss\";\r\nimport BotonesNavegacion from \"./BotonesNavegacion.jsx\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\n\r\nconst Nav = (props) => {\r\n\r\n   const [comprimido, setComprimido] = useState(true);\r\n   const [movil, setMovil] = useState(false)\r\n   const nav = useRef(null);\r\n   const listaBotones = props.botones;\r\n\r\n\r\n   useLayoutEffect(() => {\r\n      window.addEventListener(\"resize\", () => {\r\n         \r\n         if (window.innerWidth < 800) {\r\n            setMovil(true)\r\n            setComprimido(true)\r\n         } else {\r\n            \r\n               setMovil(false)\r\n            \r\n         }\r\n      })\r\n   })\r\n   useEffect(() => {\r\n\r\n      if (window.innerWidth < 800) {\r\n         nav.current.style.width = \"25vw\"\r\n         setComprimido(true)\r\n         setMovil(true)\r\n      } else {\r\n         if (comprimido) {\r\n            nav.current.style.width = \"5vw\"\r\n\r\n         } else {\r\n            nav.current.style.width = \"15vw\"\r\n\r\n         }\r\n      }\r\n\r\n   }, [comprimido, movil])\r\n   const toggleSize = () => {\r\n\r\n      setComprimido(!comprimido)\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <aside id=\"aside\" ref={nav} >\r\n            <nav className=\"escritorio\">\r\n               {!comprimido ? (<h2 onClick={toggleSize}>Dashboard</h2>) : (<h2 style={{ display: !movil ? \"block\" : \"none\" }} onClick={toggleSize}><FontAwesomeIcon icon={faBars} /></h2>)}\r\n\r\n               {listaBotones.map((boton, i) => {\r\n                  return <BotonesNavegacion key={i} boton={boton} comprimido={comprimido} />\r\n               })}\r\n\r\n\r\n            </nav>\r\n         </aside>\r\n\r\n\r\n      </>\r\n   );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport \"./Card.scss\";\r\n\r\nexport default function Card(props) {\r\n    let {nombre ,arquitectura, multiUsuario , kernel, multiTareas, licencia ,id} = props.so;\r\n    return (\r\n       \r\n        <li className=\"box\">\r\n           <span></span>\r\n           <div className=\"content\">\r\n              <h3>{nombre}</h3>\r\n                <p>arquitectura: {arquitectura}</p>\r\n                <p>multiusuario:{multiUsuario}</p>\r\n                <p>version de kernel:{kernel}</p>\r\n                <p>multi tares: {multiTareas}</p>\r\n                <h2>{licencia}</h2>\r\n           </div>\r\n        </li>\r\n     \r\n    )\r\n}\r\n","import React from 'react';\r\nimport \"./ListaCards.scss\";\r\nimport Card from \"../Card\";\r\n\r\nconst ListaCards = () => {\r\n   return (\r\n      \r\n      <ul>\r\n         <Card so={{nombre:\"Ubuntu\" ,arquitectura:\"test\", multiUsuario:true , kernel:\"Linux\", multiTareas:true, licencia:\"GPL\" }}/>\r\n      \r\n\r\n      </ul>\r\n   );\r\n}\r\n\r\nexport default ListaCards;\r\n","import React from 'react';\r\nimport Header from \"./components/Header\"\r\nimport Nav from \"./components/Navegacion\"\r\nimport logo from \"./assets/imagenes/EscudoUNAM.png\";\r\nimport { faHome, faLaptopCode,  faPen, faFileCode } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Switch, Route } from 'react-router';\r\nimport ListaCards from \"./components/ListaCards\";\r\n\r\n\r\n\r\nfunction App() {\r\n  //Botones para navegacion\r\n\r\n\r\n  let listaBotones = [\r\n    { nombre: \"inicio\", pagina: \"/\", icono: <FontAwesomeIcon icon={faHome} /> },\r\n    { nombre: \"lista S. operativos\", pagina: \"/sistemasOperativos\", icono: <FontAwesomeIcon icon={faLaptopCode} /> },\r\n    { nombre: \"insertar registro\", pagina: \"/insertar\", icono: <FontAwesomeIcon icon={faPen} /> },\r\n    { nombre: \"documentacion\", pagina: \"/documentacion\",icono:<FontAwesomeIcon icon={faFileCode}/> }\r\n  ]\r\n  let headerData = {\r\n    logo: logo,\r\n    titulo: \"S.O REST API\",\r\n\r\n  };\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <Switch >\r\n        <>\r\n          <Header header={headerData} />\r\n          <main className=\"grid\">\r\n            <Nav botones={listaBotones} />\r\n            <section>\r\n              <Route exact path=\"/\" render={() => { }} />\r\n              <Route exact path=\"/sistemasOperativos\" render={() => { return( <ListaCards/>)}} />\r\n              <Route exact path=\"/insertar\" render={() => { }} />\r\n              <Route exact path=\"/documentacion\" render={() => { }} />\r\n            </section>\r\n          </main>\r\n\r\n\r\n        </>\r\n      </Switch>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}