{"version":3,"sources":["assets/imagenes/test.png","components/Header/BotonesNavegacion.jsx","components/Header/Nav.jsx","components/Buscador/Buscador.jsx","components/Header/Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","BotonesNavegacion","withRouter","props","history","boton","pagina","nombre","icono","className","onClick","push","Nav","useState","visible","setvisible","listaBotones","botones","toggleNav","document","getElementById","style","height","useEffect","map","i","key","id","icon","faBars","Buscador","send","text","setText","onSubmit","event","preventDefault","target","reset","type","faSearch","onChange","value","placeholder","Header","header","titulo","logo","texto","alert","src","alt","App","headerData","faHome","faLaptopCode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,8PCuB5BC,EAlBWC,aAAY,SAACC,GAAW,IAC3CC,EAAWD,EAAXC,QAD0C,EAElBD,EAAME,MAA9BC,EAF0C,EAE1CA,OAAOC,EAFmC,EAEnCA,OAAOC,EAF4B,EAE5BA,MAOlB,OACG,4BAAQC,UAAU,MAAMC,QALP,WACjBN,EAAQO,KAAKL,KAMTC,EACAC,M,cC6BKI,EAvCH,SAACT,GAAW,IAAD,EAEUU,oBAAS,GAFnB,mBAEbC,EAFa,KAEJC,EAFI,KAIdC,EAAeb,EAAMc,QACrBC,EAAW,SAACJ,GAMZK,SAASC,eAAe,aAAaC,MAAMC,OAJ1CR,EAIiD,IAHA,OAKrDC,GAAYD,IASf,OANAS,qBAAU,WAEPL,GAAU,KAEX,IAGC,oCACG,yBAAKT,UAAU,cACVO,EAAaQ,KAAI,SAACnB,EAAOoB,GACxB,OAAO,kBAAC,EAAD,CAAmBC,IAAKD,EAAGpB,MAAOA,QAG/C,4BAAQK,QAAS,kBAAIQ,EAAUJ,IAAUa,GAAG,YAAYlB,UAAU,SAAQ,kBAAC,IAAD,CAAiBmB,KAAMC,OACjG,yBAAKF,GAAG,YAAYlB,UAAU,SACzBO,EAAaQ,KAAI,SAACnB,EAAOoB,GACxB,OAAO,kBAAC,EAAD,CAAmBC,IAAKD,EAAGpB,MAAOA,UCRzCyB,G,YA5BE,SAAC3B,GAAW,IACnB4B,EAAM5B,EAAN4B,KADkB,EAEDlB,mBAAS,IAFR,mBAElBmB,EAFkB,KAEZC,EAFY,KAmBzB,OACG,0BAAOC,SAXQ,SAACC,GAEnBJ,EAAKC,GAELG,EAAMC,iBACND,EAAME,OAAOC,QACbL,EAAQ,KAK4BxB,UAAU,uBACxC,4BAAS8B,KAAK,UAAU,kBAAC,IAAD,CAAiBX,KAAMY,OAC/C,2BAAQC,SAlBI,SAACN,GACnBF,EAAQE,EAAME,OAAOK,QAkBdC,YAAa,2BAA4BJ,KAAK,cCGzCK,EAnBA,SAACzC,GAAW,IAAD,EAEQA,EAAM0C,OAAjCC,EAFmB,EAEnBA,OAAOC,EAFY,EAEZA,KAAK/B,EAFO,EAEPA,aAOhB,OACG,gCACG,kBAAC,EAAD,CAAKC,QAASD,IACd,kBAAC,EAAD,CAAUe,KAPR,SAACiB,GACTC,MAAMD,MAOA,4BAAKF,GACL,yBAAKI,IAAKH,EAAMI,IAAKL,M,iBCQfM,MAxBf,WAGE,IAAIC,EAAa,CACfN,KAAMA,IACND,OAAQ,eACR9B,aACE,CACE,CAAET,OAAQ,SAAUD,OAAQ,IAAKE,MAAO,kBAAC,IAAD,CAAiBoB,KAAM0B,OAC/D,CAAE/C,OAAQ,4BAA6BD,OAAQ,sBAAuBE,MAAO,kBAAC,IAAD,CAAiBoB,KAAM2B,SAI1G,OAEE,yBAAK9C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQoC,OAAQQ,OCdJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJ5C,SAASC,eAAe,SDsHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea2034b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test.1347c9a1.png\";","import React from 'react';\r\nimport \"./BotonesNavegacion.scss\";\r\nimport {withRouter} from \"react-router\"; \r\n\r\n\r\nconst BotonesNavegacion = withRouter( (props) => {\r\nconst {history} = props;\r\nconst {pagina,nombre,icono} =  props.boton;\r\n\r\n\r\n   const handleOnClick=()=>{\r\n      history.push(pagina)\r\n   }\r\n\r\n   return (\r\n      <button className=\"nav\" onClick={handleOnClick}>\r\n\r\n         {nombre}\r\n         {icono}\r\n      </button>\r\n   );\r\n})\r\n\r\nexport default BotonesNavegacion;\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./Nav.scss\";\r\nimport BotonesNavegacion from \"./BotonesNavegacion.jsx\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBars} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\n\r\nconst Nav = (props) => {\r\n\r\n   const [visible, setvisible] = useState(false);\r\n\r\n   const listaBotones = props.botones;\r\n   const toggleNav =(visible)=>{\r\n\r\n      if(!visible){\r\n         document.getElementById(\"nav-movil\").style.height=\"15vh\"         \r\n   \r\n      }else{\r\n         document.getElementById(\"nav-movil\").style.height=\"0\"\r\n      }\r\n      setvisible(!visible)\r\n   }\r\n\r\n   useEffect(()=>{\r\n      \r\n      toggleNav(true)\r\n      \r\n   },[]);\r\n   \r\n   return (\r\n      <>\r\n         <nav className=\"escritorio\">\r\n            { listaBotones.map((boton, i) => {\r\n               return <BotonesNavegacion key={i} boton={boton} />\r\n            })}\r\n         </nav>\r\n         <button onClick={()=>toggleNav(visible)} id=\"boton-nav\" className=\"movil\"><FontAwesomeIcon icon={faBars}/></button>\r\n         <nav id=\"nav-movil\" className=\"movil\">\r\n            {(listaBotones.map((boton, i) => {\r\n               return <BotonesNavegacion key={i} boton={boton} />\r\n            }))}\r\n         </nav>\r\n      </>\r\n   );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState } from 'react';\r\nimport \"./Buscador.scss\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\"\r\nconst Buscador = (props) => {\r\n   const {send}=props;\r\n   const [text, setText] = useState(\"\")\r\n\r\nconst handleOnChange=(event)=>{\r\n   setText(event.target.value);\r\n\r\n}\r\n\r\nconst handleOnSubmit=(event)=>{\r\n   \r\n   send(text);\r\n   \r\n   event.preventDefault();\r\n   event.target.reset() ;\r\n   setText(\"\")\r\n   \r\n}\r\n\r\n   return (\r\n      <form  onSubmit={handleOnSubmit} className=\"contenedor-buscador\">\r\n         <button  type=\"submit\" ><FontAwesomeIcon icon={faSearch}/></button>\r\n         <input  onChange={handleOnChange}\r\n          placeholder={\"Buscar Sistema Operativo\"} type=\"search\" />\r\n      </form>\r\n   );\r\n}\r\n\r\nexport default Buscador;\r\n","import React from 'react';\r\nimport Nav from \"./Nav\";\r\nimport \"./Header.scss\"\r\nimport Buscador from \"../Buscador\";\r\n\r\n/*Header recibe header como propiedad\r\nque es un objeto\r\ncon logo string,titulo string y\r\nlista botones donde cada boon contiene\r\nicono svg, nombre string, ruta string\r\n*/\r\nconst Header = (props) => {\r\n\r\nconst {titulo,logo,listaBotones} =props.header;\r\n\r\n\r\nconst send=(texto)=>{\r\n   alert(texto)\r\n}\r\n\r\n   return (\r\n      <header>\r\n         <Nav botones={listaBotones}/>\r\n         <Buscador send={send}></Buscador>\r\n         <h1>{titulo}</h1>\r\n         <img src={logo} alt={titulo}/>\r\n      </header>\r\n   );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from \"./components/Header\"\r\nimport logo from \"./assets/imagenes/test.png\";\r\nimport { faHome, faLaptopCode } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Switch } from 'react-router';\r\n\r\n\r\n\r\nfunction App() {\r\n  //Botones para navegacion\r\n\r\n  let headerData = {\r\n    logo: logo,\r\n    titulo: \"S.O REST API\",\r\n    listaBotones:\r\n      [\r\n        { nombre: \"inicio\", pagina: \"/\", icono: <FontAwesomeIcon icon={faHome} /> },\r\n        { nombre: \"lista sistemas operativos\", pagina: \"/sistemasOperativos\", icono: <FontAwesomeIcon icon={faLaptopCode} /> }\r\n      ]\r\n  };\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <Switch >\r\n        <Header header={headerData} />\r\n      </Switch>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\"\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App/>\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}